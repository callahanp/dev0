#!/bin/bash
#  SPDX-FileName: getGitReference
#  SPDX-FileComment:User by all commands
#  SPDX-FileCopyrightText: Copyright (C) 2024 Patrick Callahan
#  SPDX-License-Identifier: GPL-2.0-or-later

declare -g gitReference
declare -g suite

declare -a _builds
declare -a _worktrees
declare  _gitReference
unset _uniqueGitReferences
declare -A _uniqueGitReferences

declare  exit
# shellcheck disable=SC1091
declare -g exit
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  exit="exit"
else
  exit="return"
fi

# shellcheck disable=SC1091
if [[ "$suiteName" != "$1" ]]; then source "$DEV_UTILS_PATH"/suite/getSuite "$1"; fi
if [[ "$2" == "" ]]; then
  _gitReference=$( <"$DEV_SUITES_PATH"/"$suiteName"/project/prevGitReference )
  if [[ "$_gitReference" == "" ]]; then
    echo "Could not find a value for most recent git reference";
    echo "Please specify a git reference with a git worktree";
    $exit 1;
  fi
  gitReference=$_gitReference
  $exit 0
fi
_builds=(  "$DEV_SUITES_PATH"/"$suiteName"/builds/*$2* )
#declare -p _builds
for _build in "${_builds[@]}"; do
   #echo" build: $_build"
  _buildGitReference=${_build##*[/]}
  _buildGitReference=${_buildGitReference%[.][drm]*}
  echo "_buildGitReference: $_buildGitReference"
  _uniqueGitReferences[$_buildGitReference]="${_buildGitReference}"
  echo _uniqueGitReferences["$_buildGitReference"]: "${_uniqueGitReferences["$_buildGitReference"]}"
done
#declare -p _uniqueGitReferences
if [ ${#_uniqueGitReferences[@]} -eq 0 ]; then
  echo "Error: Could not find a git reference matching $2"
else
  if [ ${#_uniqueGitReferences[@]} -eq 1 ]; then
    for key in "${!_uniqueGitReferences[@]}"; do
      gitReference=${_uniqueGitReferences[$key]}
    $exit 0
    done
  else
    echo "Error: Could not match just one git reference with $1."
    echo "Please specify a match to one of the following:"
    for key in "${!_uniqueGitReferences[@]}"; do
      echo "     ${_uniqueGitReferences[$key]}"
    done
  fi
fi