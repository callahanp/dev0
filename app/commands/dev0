#!/bin/bash
#
# Legend:
# repo-name: two-part name owner-component: eg, callahanp-simgear (a fork of flightgear-simgear)
# repo-folder: repo-name.git
# git-reference-id: git reference with "/" translated to "."
# build-id: git-reference-id.cmake-build-type
# worktree-id: repo-name.git-reference-id in other words owner-component.git-reference
# code-workspace-id: git-reference-id | suite-name.git-reference-id |anything-else
# code-workspace: code-workspace-id.code-workspace
# workspace: code-workspace
# worktree-symlink-name: component (part of repo-name)|something else needed by your build and run scripts

# dev0 add suite suite-name
# dev0 add repository git-url (upstream-git-URL) local-git-repo-name
# dev0 add worktree local-repo-name git-reference pull|rebase git-reference
# dev0 add build build-id [worktree-id worktree-symlink-name ]...
# dev0 add VsCode-workspace code-workspace-id worktree-id \[ worktree-id\]...
# dev0 remove suite fg
# dev0 remove repository local-git-repo-name
# dev0 remove worktree local-repo-name.git-reference

# dev0 remove build build-id \[worktree-id\] | \[worktree-symlink-name\]
# dev0 remove VsCode-workspace code-workspace-id  \[ worktree-id\]...
# dev0 git-pull worktree-id
# dev0 git-rebase target-worktree-id#
doCommand () {
  echo "$@"
  "$@"
}
function addSuite() {
  suiteName="$1"
  if [[ ! -e "$DEV_SUITES_DIR"/"$suiteName" ]]; then
    mkdir -p "$DEV_SUITES_DIR"/"$suiteName"
    echo "created suite in " "$DEV_SUITES_DIR"/"$suiteName"
  else
    echo "Existing Suite in " "$DEV_SUITES_DIR"/"$suiteName"
  fi
  cd "$DEV_SUITES_DIR"/"$suiteName" || echo in command dev0, unable to change directory to "$DEV_SUITES_DIR"/"$suiteName"
  return 0
}
function addWorktree() {
  localGitRepositoryName="$1"
  gitBranch="$2"
  gitCommitIsh="$3"
  declare -p localGitRepositoryName
  declare -p gitBranch
  declare -p gitCommitIsh
  if [ ! "$gitCommitIsh" ]; then
    gitCommitIsh=$gitBranch
  fi
  worktreeDir="$worktreesDir"/"$localGitRepositoryName"."$gitBranch"
  cd "$repositoriesDir"/"$localGitRepositoryName".git || return 1
  pwd
  declare -p gitBranch
  case $gitBranch in
  --orphan)
    doCommand git worktree add --orphan "$worktreeDir" "$gitCommitIsh"
  ;;
  --detach)
    doCommand git worktree add --detach "$worktreeDir" "$gitCommitIsh"
  ;;
  *)
    echo default
    pwd
    findBranch=$(git branch|grep -e " ${gitBranch}$")
    if [ "$findBranch" ]; then
      echo "Git Branch: $gitBranch exists"
      doCommand git worktree add "$worktreeDir" "$gitBranch"
    else
      echo "Git Branch: $gitBranch is new"
      doCommand git worktree add -b "$gitBranch" "$worktreeDir" "$gitCommitIsh"
    fi
  ;;
esac
cd "$worktreeDir" || return 1



  return 0
}
function addRepository() {
  repositoryURL="$1"
  if [[ "$3" != "" ]]; then
    upstreamURL="$2"
    localGitRepositoryName="$3"
  else
    upstreamURL=""
    localGitRepositoryName="$2"
  fi
  if [ ! "$localGitRepositoryName" ]; then
    localGitRepositoryDir=${repositoryURL##*/}
    localGitRepositoryName=${localGitRepositoryDir%\.*}
  fi
  declare -p repositoryURL
  declare -p upstreamURL
  declare -p localGitRepositoryName
  cd "$repositoriesDir" || return 1
  if [[ ! -e  "$repositoriesDir"/"$localGitRepositoryName".git ]]; then
    git clone --bare "$repositoryURL" "$localGitRepositoryName".git
    cd "$localGitRepositoryName".git || return 1
    if [ "$upstreamURL" ]; then
      doCommand git remote add upstream "$upstreamURL"
    fi
  fi
  echo "repositoriesDir:"
  ls "$repositoriesDir"
  cd "$repositoriesDir"/"$localGitRepositoryName".git || return 1
  git remote -v
  git branch
  gitReference=$(git branch | grep -e '^* '|sed -e 's/[*] //')
  doCommand addWorktree "$localGitRepositoryName" "$gitReference"  ""
  return 0
}
function addBuild() { #build-id [worktree-id worktree-symlink-name ]...
  buildId="$1"
  worktreeId="$2"
  cMakeBuildType="$3"
  worktreeSymLink="$4"
  declare -p buildId
  declare -p worktreeId
  declare -p cMakeBuildType
  declare -p worktreeSymLink
  mkdir -p "$buildsDir"/"$worktreeId"."$cMakeBuildType"
  symlinkPath="$buildsDir"/"$worktreeId"."$cMakeBuildType"/"$worktreeSymLink"
  symlinkTargetPath="$worktreesDir"/"$worktreeId"
  if [[ ! -e "$symlinkPath" ]]; then
    ln -s  "$symlinkTargetPath" "$symlinkPath"
  fi
  return 0
}

function addCodeWorkspace() { #code-workspace-id worktree-id...
  code_workspace_id="$1"
  declare -p code_workspace_id
  while [[ "$2" != "" ]]; do
    shift;
    worktreeId="$1"
    declare -p worktreeId
  done
  return 0
}
function add () {
  echo "add $*"
  echo "-$1-"
  case $1 in
    s|suite)
      shift;
      addSuite "$@";
      ;;
    r|repository)
      shift;
      addRepository "$@";
      ;;
    w|worktree)
      shift;
    addWorktree "$@";
      ;;
    b|build)
    shift;
    addBuild "$@";
      ;;
    cws|code-workspace)
    shift;
    addCodeWorkspace "$@";
      ;;
  esac

  return 0
}
function delete () {
  echo "delete $*"
  case $1 in
    s|suite)
      shift;
      deleteSuite "$@";
      ;;
    r|repository)
      shift;
      deleteRepository "$@";
      ;;
    w|worktree)
      shift;
      deleteWorktree "$@";
      ;;
    b|build)
      shift;
      deleteBuild "$@";
      ;;
    cws|code-workspace)
      shift;
      deleteCodeWorkspace "$@";
      ;;
  esac

  return 0
}
function pull () {
  echo "pull $*"
  return 0
}
function rebase () {
  echo "rebase $*"
  return 0
}

function pull () {
  echo "pull $*"
  return 0
}
function rebase () {
  echo "rebase $*"
  return 0
}
source "$DEV_APP_DIR"/utils/getSuite ""
if [ ! "$suiteName" ];  then
  echo "unable to determine suite name"
  return 1
fi
echo SuiteName: $suiteName

repositoriesDir=$DEV_SUITES_DIR/$suiteName/repositories
worktreesDir=$DEV_SUITES_DIR/$suiteName/worktrees
projectDir=$DEV_SUITES_DIR/$suiteName/project
editsDir=$DEV_SUITES_DIR/$suiteName/edits
buildsDir=$DEV_SUITES_DIR/$suiteName/builds
mkdir -p "$repositoriesDir"
mkdir -p "$worktreesDir"
mkdir -p "$projectDir"
mkdir -p "$editsDir"
mkdir -p "$buildsDir"
case $1 in
  a|add)
    shift
    add "$@"
    ;;
  d|delete)
    shift
    delete "$@"
    ;;
  p|pull)
    shift
    pull "$@"
      ;;
  r|rebase)
    shift
    rebase "$@"
          ;;
  default)
    echo "Error" "$1 is an invalid command"
    echo "use a, add, d, delete, p, pull, r, or rebase"
    return 1;
esac